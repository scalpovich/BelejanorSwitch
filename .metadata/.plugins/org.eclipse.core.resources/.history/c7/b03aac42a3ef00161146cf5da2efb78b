package com.fitbank.middleware.authorizations;

import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import com.fitbank.dto.management.Detail;
import com.fitbank.dto.management.Field;
import com.fitbank.middleware.cscoreswitch.wIso8583;
import com.fitbank.middleware.logger.Logger;
import com.fitbank.middleware.logger.LoggerConfig.TypeLog;
import com.fitbank.middleware.logger.LoggerConfig.TypeMonitor;
import com.fitbank.middleware.logger.LoggerConfig.TypeWriteLog;
import com.fitbank.middleware.memcached.ActionCodeTable;
import com.fitbank.middleware.memcached.MemoryGlobal;
import com.fitbank.middleware.parser.FitParser;
import com.fitbank.middleware.utils.GeneralUtils;
import com.fitbank.middleware.utils.StringUtils;
import com.fitbank.uci.client.UCIClient;

public class FitCoreProcessor{
	
	private wIso8583 iso;
	private Logger log;

	public wIso8583 getIso() {
		return iso;
	}
	
	public void setIso(wIso8583 iso) {
		this.iso = iso;
	}

	public FitCoreProcessor(){
		this.log = new Logger();
	}
	public FitCoreProcessor(wIso8583 iso){
		this();
		this.iso = iso;
	}
	
	public Detail ProcessingTransactionFitCore(){
		
		Detail ResponseDetail = null;
		
		try {
			Detail detail = new Detail();
			FitParser parser = new FitParser();
			
			if(this.iso.getISO_000_Message_Type().startsWith("14"))
				detail = parser.parseReversoFitBank(this.iso);
			else
				detail = parser.parseFitbankTransaction(this.iso);
			
			if(parser.isFlagError()){
				
				if(detail != null){
					
					final Detail detailUci = detail;
					System.out.println("IMPRIME DETAIL ---------------> " + detail.toXml());
					log.WriteLog(detail, TypeLog.debug, TypeWriteLog.file);
					ExecutorService pool = Executors.newFixedThreadPool(3);
					Callable<Detail> callThread = new Callable<Detail>() {
						@Override
						public Detail call() throws Exception {
							return SendUciTransaction(detailUci);
						}
					};
					Future<Detail> futureDetail = pool.submit(callThread);
					
					 this.iso.getTickAut().start();
				     ResponseDetail = (Detail) futureDetail.get(this.iso.getWsTransactionConfig().
														 getProccodeTimeOutValue(), TimeUnit.MILLISECONDS);
				     this.iso.getTickAut().stop();
				     
					if(ResponseDetail != null){
						
						if(ResponseDetail.getResponse().getCode().trim().equals("0")){
							
							this.iso.setISO_039_ResponseCode("000");
							this.iso.setISO_039p_ResponseDetail("TRANSACCION EXITOSA");
							this.iso.setISO_104_TranDescription("LA TRANSACCION HA SIDO COMPLETADA SATISFACTORIAMENTE");
							
							Field f = asStream(ResponseDetail.getFields().iterator(), true)
									 .filter(x -> x.getName().equalsIgnoreCase("NUMEROMENSAJE_ORIGINAL"))
									 .findFirst().orElseGet(()-> null);
							
							if(f != null){
								
								this.iso.setISO_044_AddRespData(StringUtils.isNullOrEmpty(f.getValue().toString()) 
										       ? ResponseDetail.getMessageId() : f.getValue().toString());
							}	
							else
								this.iso.setISO_044_AddRespData(ResponseDetail.getMessageId());
						}
						else{
						
							String [] errorParse =  ParseErrorsCodeIsoToFit(ResponseDetail.getResponse().getCode().trim());
							this.iso.setISO_039_ResponseCode(errorParse[0]);
							this.iso.setISO_039p_ResponseDetail(ResponseDetail.getResponse().getCode() + " - " + 
																ResponseDetail.getResponse().getUserMessage().toUpperCase());
							this.iso.setISO_104_TranDescription(errorParse[1]);
							this.iso.setISO_044_AddRespData(ResponseDetail.getMessageId());
						}
						
						this.iso.setWsIso_LogStatus(2);	
						log.WriteLog(ResponseDetail, TypeLog.debug, TypeWriteLog.file);
					}
					else{
						
						this.iso.setISO_039_ResponseCode("909");
						this.iso.setISO_039p_ResponseDetail("SE HA RECIBIDO UNA RESPUESTA NULLA POR PARTE DE CORE FITBANK");
					}
				}
			}
			else{
				
				if(this.iso.getISO_000_Message_Type().startsWith("14"))
					this.iso.setISO_039_ResponseCode(parser.getCodErrorIso());
				else
					this.iso.setISO_039_ResponseCode("908");
				this.iso.setISO_039p_ResponseDetail(parser.getErrorParser());
			}
			
		}catch (InterruptedException | ExecutionException | TimeoutException e)  {
			if(this.iso.getTickAut().isStarted())
				this.iso.getTickAut().stop();
			this.iso.setISO_039_ResponseCode("907");
			this.iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("TIMEOUT RESPONSE FIT ", e));
			this.iso.setWsIso_LogStatus(9);
		}	
		catch (Exception e) {
			
			if(this.iso.getTickAut().isStarted())
				this.iso.getTickAut().stop();
			this.iso.setISO_039_ResponseCode("909");
			this.iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR MODULO AUTORIZACION ", e));
			log.WriteLogMonitor("Error modulo FitCoreProcessor::ProcessingTransactionFitCore ", TypeMonitor.error, e);
			
		}finally {
			this.iso.setWsTempAut((this.iso.getTickAut().getTime(TimeUnit.MILLISECONDS)/1000.0));
		}
		
		return ResponseDetail;
	}
	private String[] ParseErrorsCodeIsoToFit(String errorFit){
		String[] data = new String[]{ "308","" };
		try {
			ActionCodeTable codTable = new ActionCodeTable();
			codTable = codTable.getCodErrorFromFitCodeList(errorFit);
			if(codTable != null){
				data[0] = codTable.getAct_codIso();
				data[1] = codTable.getAct_desIso();
			}
		} catch (Exception e) {
			log.WriteLogMonitor("Error modulo FitCoreProcessor::ParseErrorsCodeIsoToFit ", TypeMonitor.error, e);
			e.printStackTrace();
		}
		return data;
	}
	private Detail SendUciTransaction(Detail det) throws InterruptedException{
		
		Detail detResponse = new Detail();
		detResponse = UCIClient.send(det, MemoryGlobal.IpUci, MemoryGlobal.portUci, MemoryGlobal.timeOutUci);
		return detResponse;
	}
	protected static <T> Stream<T> asStream(Iterator<T> sourceIterator) {
        return asStream(sourceIterator, false);
    }

	protected static <T> Stream<T> asStream(Iterator<T> sourceIterator, boolean parallel) {
        Iterable<T> iterable = () -> sourceIterator;
        return StreamSupport.stream(iterable.spliterator(), parallel);
    }
	
}
