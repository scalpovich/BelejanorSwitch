package com.fitbank.middleware.authorizations;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.StopWatch;

import com.fitbank.dto.management.Detail;
import com.fitbank.dto.management.Record;
import com.fitbank.dto.management.Table;
import com.fitbank.middleware.cscoreswitch.TransactionConfiguration;
import com.fitbank.middleware.cscoreswitch.wIso8583;
import com.fitbank.middleware.logger.Logger;
import com.fitbank.middleware.logger.LoggerConfig.TypeMonitor;
import com.fitbank.middleware.memcached.AdditionalIsoValues;
import com.fitbank.middleware.memcached.TransactionConfig;
import com.fitbank.middleware.sqlservices.IsoRetrievalTransaction;
import com.fitbank.middleware.utils.GeneralUtils;
import com.fitbank.middleware.utils.Iterables;
import com.fitbank.middleware.utils.Ref;
import com.fitbank.middleware.utils.SerializationObject;
import com.fitbank.middleware.utils.StringUtils;

public class FitIsAut implements Callable<wIso8583>{
	
	private wIso8583 iso;
	private Logger log;
	
	public FitIsAut(){
		
	}
	public FitIsAut(wIso8583 iso){
		this.iso = iso;
		this.log = new Logger();
	}
	
	public wIso8583 getIso() {
		return iso;
	}
	public void setIso(wIso8583 iso) {
		this.iso = iso;
	}
	public wIso8583 ExecuteDebitTransaction(wIso8583 iso){
		
		iso.setISO_104_TranDescription("Debito ATM ");
		iso.setISO_120_ExtendedData("Esto es una prueba campo 120");
		FitCoreProcessor processor = new FitCoreProcessor(iso);
		@SuppressWarnings("unused")
		Detail response = processor.ProcessingTransactionFitCore();
		return iso;
	}
	
	public wIso8583 ExecuteValidateCtaTrx(wIso8583 iso){
		
		try {
			
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			
			if(response != null){
				
				if(response.getResponse().getCode().equals("0")){
					Table t = GeneralUtils.asStream(response.getTables().iterator(), true)
							  .filter(p -> p.getName().equalsIgnoreCase("TCUENTA"))
							  .findFirst().orElseGet(()-> null);
					
					if(t != null){
						
						Record r = GeneralUtils.asStream(t.getRecords().iterator(), true)
								   .filter(p -> p.getNumber() == 0)
								   .findFirst().orElseGet(()-> null);
						
						boolean valor = true;
						if(r != null){
							
							valor = GeneralUtils.asStream(r.getFields().iterator(), true)
									  .filter(g -> g.getValue() != null)
									  .noneMatch(g -> g.getValue().equals(iso.getISO_102_AccountID_1()));
							
								if(!valor ){
									iso.setISO_039_ResponseCode("000");
									iso.setISO_039p_ResponseDetail("TRANSACCION EXITOSA");
									return iso;
								}
						}
					}
					iso.setISO_039_ResponseCode("214");
					iso.setISO_039p_ResponseDetail("CUENTA " + iso.getISO_102_AccountID_1() + " NO EXISTE");
				}
			}
				
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, false));	
		}
		return iso;
	}
	
	public wIso8583 ExecuteQValidateCtaTrx(wIso8583 iso){
		
		try {
			
			iso.getTickAut().reset();
			iso.getTickAut().start();
			IsoRetrievalTransaction sql = new IsoRetrievalTransaction();
			iso = sql.executeQueryValidAccount(new Ref<wIso8583>(iso));
			if(iso.getTickAut().isStarted())
				iso.getTickAut().stop();
			
		} catch (Exception e) {
			
			if(iso.getTickAut().isStarted())
				iso.getTickAut().stop();
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, false));	
		}finally {
			
			iso.setWsTempAut((iso.getTickAut().getTime(TimeUnit.MILLISECONDS)/1000.0));
		}
		return iso;
	}
	
	public wIso8583 ExecuteStandarTrx(wIso8583 iso){
		
		iso = addIsoAdditionalRows(new Ref<wIso8583>(iso));
		FitCoreProcessor processor = new FitCoreProcessor(iso);
		Detail response = processor.ProcessingTransactionFitCore();
		iso.setFitBankDetail(response);
		return iso;
	}
	public wIso8583 ExecuteStandarTransaction(wIso8583 iso){
		
		iso = addIsoAdditionalRows(new Ref<wIso8583>(iso));
		FitCoreProcessor processor = new FitCoreProcessor(iso);
		Detail response = processor.ProcessingTransactionFitCore();
		iso.setFitBankDetail(response);
		return iso;
	}
	public wIso8583 ExecuteTransferTrxAlex(wIso8583 iso){
		
		wIso8583 clonadowIso = null;
		try {
			
			clonadowIso = (wIso8583) iso.clone();
			
			clonadowIso.setISO_122_ExtendedData("047100MAN001");
			clonadowIso.setISO_123_ExtendedData("TRANSFERENCIA ENTRE CUENTAS INTERNAS");
			clonadowIso.setISO_124_ExtendedData("CA");
			
		} catch (CloneNotSupportedException e) {
			
			iso.setISO_039_ResponseCode("000");
			iso.setISO_039p_ResponseDetail("ERROR AL CLONAR OBJETO wISO: " + GeneralUtils.ExceptionToString("", e, true));
			return iso;
		}
		clonadowIso.setWsTransactionConfig((TransactionConfiguration)iso.getWsTransactionConfig().CloneObject());
		
		FitCoreProcessor processor = new FitCoreProcessor(clonadowIso);
		@SuppressWarnings("unused")
		Detail response = processor.ProcessingTransactionFitCore();
		iso.setISO_039_ResponseCode(clonadowIso.getISO_039_ResponseCode());
		iso.setISO_039p_ResponseDetail(clonadowIso.getISO_039p_ResponseDetail());
		iso.setISO_044_AddRespData(clonadowIso.getISO_044_AddRespData());
		iso.setWsIso_LogStatus(clonadowIso.getWsIso_LogStatus());
		iso.setWsTempAut(clonadowIso.getWsTempAut());
		return iso;
	}
	
	public wIso8583 ExecuteTransferTrxAlexCommerce(wIso8583 iso){
		
		try {
		
			IsoRetrievalTransaction sql = new IsoRetrievalTransaction();
			iso = sql.RetrieveCommerceSQL(iso);
			if(iso.getISO_039_ResponseCode().equals("000"))
				iso = ExecuteTransferTrxAlex(iso);
			
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("000");
			iso.setISO_039p_ResponseDetail("ERROR EN PROCESOS: " + GeneralUtils.ExceptionToString("", e, true));
			return iso;
		}
		
		return iso;
	}
	
	public wIso8583 QuerySimpleDocument(wIso8583 iso){
		
		try {
		
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			StringBuilder build = new StringBuilder();
			
			if(response != null){
				if(response.getResponse().getCode().equals("0")){
					
					ExecutorService executor = Executors.newFixedThreadPool(iso.getISO_115_ExtendedData()
											   .split("\\,").length);
					try {
						
						List<Future<Object>> list = new ArrayList<Future<Object>>();
						for (int i = 0; i < iso.getISO_115_ExtendedData()
												   .split("\\,").length; i++) {
							Callable<Object> obj = new FitQueryables(Arrays.asList(iso.getISO_115_ExtendedData()
					   				.split("\\,")).get(i), response); 
							 Future<Object> future = executor.submit(obj);
							 list.add(future);
							
						}
						for(Future<Object> fut : list){
				            try {
				                
				            	build.append( String.valueOf(fut.get()).equalsIgnoreCase("null")?"|"
				            			    :String.valueOf(fut.get()) + "|");
				                
				            } catch (Exception e) {
				            	
				            	log.WriteLogMonitor("Error modulo FitIsAut::QueryClientDocument ", TypeMonitor.error, e);
				            }
				        }
						iso.setISO_114_ExtendedData(StringUtils.trimEnd(build.toString(),"|"));
						
					} finally {
						
						executor.shutdown();
					}
			    } 
		  }
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, true));
		}
		
		return iso;
	}
	
	
	public wIso8583 QueryLast5Movements(wIso8583 iso){
		
		try {
			
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			FitQueryables qry = null;
			if(response != null){
				if(response.getResponse().getCode().equals("0")){
					qry = new FitQueryables();
					List<Iterables> it = qry.QueryDetailFitBankIterator("TMOVIMIENTOS", 5, 
						       new String[]{ "NUMEROMENSAJE","DEBITOCREDITO","VALORMONEDACUENTA",
						    		         "CMONEDA_MOVIMIENTO", "FREAL","CTERMINAL"}, response);
				
				if(it != null){
					
					if(it.size() > 0){
						
						iso.setISO_114_ExtendedData(
								SerializationObject.ObjectToXML((Serializable) it));						
					}else {
						
						iso.setISO_039_ResponseCode("116");
						iso.setISO_039p_ResponseDetail("LA CUENTA " + iso.getISO_102_AccountID_1() 
						 + " NO TIENE MOVIMIENTOS REGISTRADOS");
					}
				
				}else {
					
					iso.setISO_039_ResponseCode("909");
					iso.setISO_039p_ResponseDetail(qry.getError());
				}
			 }
		  }
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, false));
		}
		return iso;
	}
	
	public wIso8583 QueryBalance(wIso8583 iso){
		
		try {
			
			iso = addIsoAdditionalRows(new Ref<wIso8583>(iso));
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			
			if(response != null){
				
				if(response.getResponse().getCode().equals("0")){
					
				   FitQueryables fitSaldoDisponible = new FitQueryables("SALDOS", 0, "SDISPONIBLE", response);
				   FitQueryables fitSaldoContable = new FitQueryables("SALDOS", 0, "SCONTABLE", response);
				   fitSaldoDisponible.join();
				   fitSaldoContable.join();
				   double sDisponible = Double.parseDouble((String) fitSaldoDisponible.getReturnValue());
				   double sContable =  Double.parseDouble(String.valueOf(fitSaldoContable.getReturnValue()));
				   
				    iso.setISO_054_AditionalAmounts((iso.getISO_003_ProcessingCode().substring(2,4)
				    	.equals("10")?"10":"20") 
				    	+ "01" + (String.format("%.0f",iso.getISO_049_TranCurrCode())) 
				    	+ (sContable > 0 ?"C":"D") + String.format("%013.2f", sContable).replace(",", "").replace(".", "")
				    	+ (iso.getISO_003_ProcessingCode().substring(2,4).equals("10")?"10":"20") + "02" 
				    	+ (String.format("%.0f",iso.getISO_049_TranCurrCode()) + (sDisponible > 0 ?"C":"D") 
				    	+ String.format("%013.2f", sDisponible).replace(",", "").replace(".", "")));
				}
			}
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, false));	
		}
		return iso;
	}
	
	public wIso8583 DebitWithBalance(wIso8583 iso){
		
		try {
			
			if(iso.getISO_000_Message_Type().startsWith("12")){
				wIso8583 isoConsul  = new wIso8583();
				//isoConsul = (wIso8583) iso.clone();
				isoConsul = iso.cloneWiso(iso);
				isoConsul.setISO_003_ProcessingCode("311000");
				isoConsul.setISO_011_SysAuditNumber(GeneralUtils.GetSecuencial(8));
				isoConsul.setWsTransactionConfig(new TransactionConfiguration
												(new TransactionConfig("311000", 
											    Integer.parseInt(iso.getISO_024_NetworkId()), 
											    iso.getISO_018_MerchantType(), -1)));
				isoConsul = QueryBalance(isoConsul);
				if(isoConsul.getISO_039_ResponseCode().equals("000")){
					
					iso = ExecuteStandarTransaction(iso);
					
					if(iso.getISO_039_ResponseCode().equals("000")){
						iso.setISO_054_AditionalAmounts(isoConsul.getISO_054_AditionalAmounts());
						iso.setISO_038_AutorizationNumber(GeneralUtils.GetSecuencial(16).toUpperCase());
					}
					
				}else{
					
					iso.setISO_039_ResponseCode(isoConsul.getISO_039_ResponseCode());
					iso.setISO_039p_ResponseDetail(isoConsul.getISO_039p_ResponseDetail());
				}
				
				iso.setWsTempAut(iso.getWsTempAut() + isoConsul.getWsTempAut());
					
			}else {
				
				iso = ExecuteStandarTransaction(iso);
			}
			
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, false));
		}
		return iso;
	}
	
	public wIso8583 ExecuteQueryTransaction(wIso8583 iso){
		try {
			Thread.sleep(2500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		iso.setISO_039_ResponseCode("000");
		iso.setISO_039p_ResponseDetail("TRANSACCION EXITOSA");
		iso.setISO_054_AditionalAmounts("84002999900000000000000000000000000000000000");		
		iso.setWsIso_LogStatus(2);
		return iso;
	}
	
	@Override
	public wIso8583 call() throws Exception {
		return ExecuteStandarTransaction(this.iso);
	}
	
	public wIso8583 QueryIterableGeneric(wIso8583 iso){
		
		try {
			
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			FitQueryables qry = null;
			if(response != null){
				if(response.getResponse().getCode().equals("0")){
					qry = new FitQueryables();
					List<Iterables> it = qry.QueryDetailFitBankIterator("TCUENTASPERSONA", -1, 
						       (String[])iso.getISO_115_ExtendedData().split("\\,") , response);
				
				if(it != null){
					
					if(it.size() > 0){
						
						iso.setISO_114_ExtendedData(
								SerializationObject.ObjectToXML((Serializable) it));						
					}else {
						
						iso.setISO_039_ResponseCode("116");
						iso.setISO_039p_ResponseDetail("EL SOCIO/CLIENTE: " + iso.getISO_002_PAN()
						 + " NO POSEE PRODUCTOS REGISTRADOS EN LA INSTITUCION FINANCIERA");
					}
				
				}else {
					
					iso.setISO_039_ResponseCode("909");
					iso.setISO_039p_ResponseDetail(qry.getError());
				}
			 }
		  }
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, true));
		}
		return iso;
	}

    public wIso8583 QueryIterableGenericWithTable(wIso8583 iso){
		
		try {
			
			FitCoreProcessor processor = new FitCoreProcessor(iso);
			Detail response = processor.ProcessingTransactionFitCore();
			FitQueryables qry = null;
			if(response != null){
				if(response.getResponse().getCode().equals("0")){
					qry = new FitQueryables();
					List<Iterables> it = qry.QueryDetailFitBankIterator(iso.getISO_035_Track2(), -1, 
						       (String[])iso.getISO_115_ExtendedData().split("\\,") , response);
				
				if(it != null){
					
					if(it.size() > 0){
						
						iso.setISO_114_ExtendedData(
								SerializationObject.ObjectToXML((Serializable) it));	
						FitQueryables fiter = new FitQueryables();
						iso.setISO_123_ExtendedData(StringUtils.IsNullOrEmpty((String) 
								fiter.QueryDetailFitCTL("TOTAL_REGISTROS", response))?"S/D"
								 :(String) fiter.QueryDetailFitCTL("TOTAL_REGISTROS", response));
						
					}else {
						
						iso.setISO_039_ResponseCode("116");
						iso.setISO_039p_ResponseDetail("EL SOCIO/CLIENTE: " + iso.getISO_002_PAN()
						 + " NO POSEE "+ iso.getISO_035_Track2() +" REGISTRADOS EN LA INSTITUCION FINANCIERA");
					}
				
				}else {
					
					iso.setISO_039_ResponseCode("909");
					iso.setISO_039p_ResponseDetail(qry.getError());
				}
			 }
		  }
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, true));
		}

		return iso;
	}
    
    public wIso8583 DebitCreditWithValidationClient(wIso8583 iso){
    	

    	try {
			
    		if(iso.getISO_000_Message_Type().startsWith("12")){
    			
    			wIso8583 isoConsul  = new wIso8583();

				isoConsul = iso.cloneWiso(iso);
				isoConsul.setISO_003_ProcessingCode("600002");
				isoConsul.setISO_011_SysAuditNumber(GeneralUtils.GetSecuencial(8));
				isoConsul.setISO_124_ExtendedData(isoConsul.getISO_115_ExtendedData());
				isoConsul.setISO_035_Track2("TCUENTA");
				isoConsul.setISO_115_ExtendedData("IDENTIFICACION,CTIPOIDENTIFICACION"
						+ ",NOMBRELEGAL,NUMEROTELEFONO");
				isoConsul.setISO_033_FWDInsID("XXXXXXXXXXX");
				isoConsul.setISO_114_ExtendedData(StringUtils.Empty());
				isoConsul.setWsTransactionConfig(new TransactionConfiguration
												(new TransactionConfig("600002", 
											    Integer.parseInt(iso.getISO_024_NetworkId()), 
											    iso.getISO_018_MerchantType(), -1)));
				isoConsul = getDataClientforBCE_VC(isoConsul);
				if(isoConsul.getISO_039_ResponseCode().equals("000")){
					
					iso = addIsoAdditionalRows(new Ref<wIso8583>(iso));
					boolean flag = Boolean.parseBoolean(iso.getISO_124_ExtendedData());
					isoConsul = validatePersonBCE_VCE(iso.getISO_115_ExtendedData(), isoConsul, flag);
					if(isoConsul.getISO_039_ResponseCode().equals("000")){

					
						iso = ExecuteStandarTransaction(iso);
						iso.setWsTempAut(iso.getWsTempAut() + isoConsul.getWsTempAut());
						
					}else{
						
						iso.setISO_039_ResponseCode(isoConsul.getISO_039_ResponseCode());
						iso.setISO_039p_ResponseDetail("[VALIDACION] " + isoConsul.getISO_039p_ResponseDetail());
						iso.setWsTempAut(isoConsul.getWsTempAut());
						iso.setWsIso_LogStatus(isoConsul.getWsIso_LogStatus());


					}
					
				}else{
					
					iso.setISO_039_ResponseCode(isoConsul.getISO_039_ResponseCode());
					iso.setISO_039p_ResponseDetail("[CONSULTA VALIDACION] " + isoConsul.getISO_039p_ResponseDetail());
					iso.setISO_044_AddRespData(isoConsul.getISO_044_AddRespData());
					iso.setISO_104_TranDescription(isoConsul.getISO_104_TranDescription());
					iso.setWsTempAut(isoConsul.getWsTempAut());
					iso.setWsIso_LogStatus(isoConsul.getWsIso_LogStatus());
				}
    			
    		}else{
    			
    			iso = ExecuteStandarTransaction(iso);
    		}
    		
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail("ERROR EN PROCESOS " + GeneralUtils.ExceptionToString(null, e, true));
		}
    	return iso;
    }
    class ISO{
    	private wIso8583 iso;

		public wIso8583 getIso() {
			return iso;
		}

		public void setIso(wIso8583 iso) {
			this.iso = iso;
		}
    	
    }
    public wIso8583 TransferWithValidationClient(wIso8583 iso){
    	
    	try {
			
    		ISO iso8583 = new ISO();
    		iso8583.setIso(iso);
    		StopWatch timmer = new StopWatch();
    		double timmerDouble = 0;
    		
    		if(iso.getISO_000_Message_Type().startsWith("12")){
    			
    			wIso8583[] isoConsul  = new wIso8583[2];
    			
    			Thread t1 = new Thread(new Runnable() {
					@Override
					public void run() {
						
						isoConsul[0] = iso8583.getIso().cloneWiso(iso8583.getIso());
						isoConsul[0].setISO_003_ProcessingCode("600002");
						isoConsul[0].setISO_011_SysAuditNumber(GeneralUtils.GetSecuencial(8));
						isoConsul[0].setISO_124_ExtendedData(isoConsul[0].getISO_115_ExtendedData());
						isoConsul[0].setISO_035_Track2("TCUENTA");
						isoConsul[0].setISO_115_ExtendedData("IDENTIFICACION,CTIPOIDENTIFICACION"
								+ ",NOMBRELEGAL,NUMEROTELEFONO");
						isoConsul[0].setISO_033_FWDInsID("XXXXXXXXXXX");
						isoConsul[0].setISO_114_ExtendedData(StringUtils.Empty());
						isoConsul[0].setWsTransactionConfig(new TransactionConfiguration
														(new TransactionConfig("600002", 
													    Integer.parseInt(iso8583.getIso().getISO_024_NetworkId()), 
													    iso8583.getIso().getISO_018_MerchantType(), -1)));
						isoConsul[0] = getDataClientforBCE_VC(isoConsul[0]);
					}
				});
    			
    			Thread t2 = new Thread(new Runnable() {
					@Override
					public void run() {
						
						isoConsul[1] = iso8583.getIso().cloneWiso(iso8583.getIso());
						isoConsul[1].setISO_003_ProcessingCode("600002");
						isoConsul[1].setISO_011_SysAuditNumber(GeneralUtils.GetSecuencial(8));
						isoConsul[1].setISO_124_ExtendedData(isoConsul[1].getISO_115_ExtendedData());
						isoConsul[1].setISO_035_Track2("TCUENTA");
						isoConsul[1].setISO_102_AccountID_1(iso8583.getIso().getISO_103_AccountID_2());
						isoConsul[1].setISO_115_ExtendedData("IDENTIFICACION,CTIPOIDENTIFICACION"
								+ ",NOMBRELEGAL,NUMEROTELEFONO");
						isoConsul[1].setISO_033_FWDInsID("XXXXXXXXXXX");
						isoConsul[1].setISO_114_ExtendedData(StringUtils.Empty());
						isoConsul[1].setWsTransactionConfig(new TransactionConfiguration
														(new TransactionConfig("600002", 
													    Integer.parseInt(iso8583.getIso().getISO_024_NetworkId()), 
													    iso8583.getIso().getISO_018_MerchantType(), -1)));
						isoConsul[1] = getDataClientforBCE_VC(isoConsul[1]);
					}
				});
    			timmer.reset();
    			timmer.start();
				t1.start(); t2.start(); t1.join(); t2.join();
				if(timmer.isStarted())
					timmer.stop();
				timmerDouble =  (timmer.getTime(TimeUnit.MILLISECONDS)/1000.0);
				
				if(isoConsul[0].getISO_039_ResponseCode().equals("000") && 
						isoConsul[1].getISO_039_ResponseCode().equals("000")){
					
					iso = addIsoAdditionalRows(new Ref<wIso8583>(iso));
					boolean flag = Boolean.parseBoolean(iso.getISO_124_ExtendedData());
					isoConsul[0] = validatePersonBCE_VCE(iso.getISO_034_PANExt() + "|" + iso.getISO_002_PAN() + "|" 
					               + iso.getISO_055_EMV(), isoConsul[0], flag);
					isoConsul[1] = validatePersonBCE_VCE(iso.getISO_115_ExtendedData(), isoConsul[1], flag);
					if(isoConsul[0].getISO_039_ResponseCode().equals("000") &&
							isoConsul[1].getISO_039_ResponseCode().equals("000")){
					
						iso = ExecuteStandarTransaction(iso);
						iso.setWsTempAut(iso.getWsTempAut() + timmerDouble);
						
					}else{
						
						if(!isoConsul[0].getISO_039_ResponseCode().equals("000")){
							
							iso.setISO_039_ResponseCode(isoConsul[0].getISO_039_ResponseCode());
							iso.setISO_039p_ResponseDetail( isoConsul[0].getISO_039p_ResponseDetail() 
									                       + " (ORDENANTE)");
							iso.setISO_044_AddRespData(isoConsul[0].getISO_044_AddRespData());
							iso.setISO_104_TranDescription(isoConsul[0].getISO_104_TranDescription());
							iso.setWsIso_LogStatus(isoConsul[0].getWsIso_LogStatus());
							System.out.println("Tiempo " + isoConsul[0].getWsTempAut());
							
						}else if (!isoConsul[1].getISO_039_ResponseCode().equals("000")) {
							
							iso.setISO_039_ResponseCode(isoConsul[1].getISO_039_ResponseCode());
							iso.setISO_039p_ResponseDetail(isoConsul[1].getISO_039p_ResponseDetail()
															+ " (RECEPTOR)");
							iso.setISO_044_AddRespData(isoConsul[1].getISO_044_AddRespData());
							iso.setISO_104_TranDescription(isoConsul[1].getISO_104_TranDescription());
							iso.setWsIso_LogStatus(isoConsul[1].getWsIso_LogStatus());
						}
						iso.setWsTempAut(timmerDouble);
						
					}
					
				}else{
					
					if(!isoConsul[0].getISO_039_ResponseCode().equals("000")){
						
						iso.setISO_039_ResponseCode(isoConsul[0].getISO_039_ResponseCode());
						iso.setISO_039p_ResponseDetail("[CONSULTA VALIDACION] " + 
						               isoConsul[0].getISO_039p_ResponseDetail());
						iso.setWsIso_LogStatus(isoConsul[0].getWsIso_LogStatus());
						
					}else if (!isoConsul[1].getISO_039_ResponseCode().equals("000")) {
						
						iso.setISO_039_ResponseCode(isoConsul[1].getISO_039_ResponseCode());
						iso.setISO_039p_ResponseDetail("[CONSULTA VALIDACION] " + 
						                isoConsul[1].getISO_039p_ResponseDetail());
						iso.setWsIso_LogStatus(isoConsul[1].getWsIso_LogStatus());
					}
					iso.setWsTempAut(timmerDouble);
				}

				
    			
    		}else{
    			
    			iso = ExecuteStandarTransaction(iso);
    		}
    		
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail("ERROR EN PROCESOS " + GeneralUtils.ExceptionToString(null, e, true));
		}
    	return iso;
    }
    @SuppressWarnings("unchecked")
	public wIso8583 getDataClientforBCE_VC(wIso8583 iso){
    	
    	try {

    		iso = QueryIterableGenericWithTable(iso);
    		if(iso.getISO_039_ResponseCode().equals("000")){
    			
    			List<Iterables> it = (List<Iterables>) SerializationObject
    					.XMLToObject(iso.getISO_114_ExtendedData());
    			iso.setISO_114_ExtendedData(StringUtils.Empty());
    			String a = StringUtils.Empty();
    			for (Iterables iterables : it) {
    				
    				for (int i = 0; i < iso.getISO_115_ExtendedData().split("\\,").length; i++) {
    					
    					iso.setISO_114_ExtendedData(iso.getISO_114_ExtendedData() + "|" + iterables.getIterarors().
							get(Arrays.asList(iso.getISO_115_ExtendedData().split("\\,")).get(i)));
    				}
    			}
    			System.out.println(a);
    			iso.setISO_114_ExtendedData(StringUtils.TrimStart(iso.getISO_114_ExtendedData(),"|"));
    			if(Arrays.asList(iso.getISO_114_ExtendedData().split("\\|")).size() != 4){
    				
    				iso.setISO_114_ExtendedData(iso.getISO_114_ExtendedData() + "|+593-0900000000");
    			}
    			
    		}
    		
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR EN PROCESOS ", e, true));
		}
    	return iso;
    }
    
    private wIso8583 validatePersonBCE_VCE(String data, wIso8583 iso, boolean validateMovil){
    	
    	String nombres, TipoId, documentId, celu = null;
    	nombres = Arrays.asList(data.split("\\|")).get(0);
    	TipoId = Arrays.asList(data.split("\\|")).get(2);
    	documentId = Arrays.asList(data.split("\\|")).get(1);
    	if(validateMovil)
    		celu = Arrays.asList(data.split("\\|")).get(3);
    	try {
    		String firstName = StringUtils.Empty();
			String lastName = StringUtils.Empty();
    		if(nombres.toUpperCase().contains("LN=") || nombres.toUpperCase().contains("FN=")){
    			String noms[] = nombres.split("\\=");
    			if(noms[0].equalsIgnoreCase("FN")){
 
    				firstName = noms[1].replace(" LN", StringUtils.Empty())
    						.replace(" FN", StringUtils.Empty());
    				lastName = noms[2].trim();   				
    			}else{
    				
    				lastName = noms[1].replace(" LN", StringUtils.Empty())
    						.replace(" FN", StringUtils.Empty());
    				firstName = noms[2].trim();   
    			}
    		}else{
    			
    			String nomsII[] = nombres.split("\\s+");
    			if(nomsII.length > 1){
    				
    				firstName = nomsII[0];
    				lastName = nomsII[1];
    			}
    		}
    		int coincidencias = 0;
    		String nombresBDD = Arrays.asList(iso.getISO_114_ExtendedData().split("\\|")).get(2);
    		String nombresBDDArray[] = nombresBDD.split("\\s+");
    		for (int i = 0; i < nombresBDDArray.length; i++) {
				
    			if(nombresBDDArray[i].equalsIgnoreCase(firstName.toUpperCase()))
    				coincidencias++;
    			if(nombresBDDArray[i].equalsIgnoreCase(lastName.toUpperCase()))
    				coincidencias++;
			}
    		if(coincidencias < 2){

    			iso.setISO_039_ResponseCode("115");
    			iso.setISO_039p_ResponseDetail("NOMBRES DEL CUENTAHIENTE NO COINCIDEN "
    					+ "CON LOS REGISTRADOS EN EL SISTEMA");
    			return iso;
    		}
    		
    		switch (TipoId.toUpperCase()) {
			case "NIDN":
				TipoId = "CED";
				break;
			case "TXID":
				TipoId = "RUC";
				break;
			case "CCPT":
				TipoId = "PAS";
				break;
			case "ARNU":
				TipoId = "F";
				break;	
				
			default:
				break;
			}
			if(!Arrays.asList(iso.getISO_114_ExtendedData().split("\\|")).get(1).equals(TipoId)){
				
				iso.setISO_039_ResponseCode("115");
    			iso.setISO_039p_ResponseDetail("TIPO DE IDENTIFICACION DEL CUENTAHABIENTE NO COINCIDE "
    					+ "CON EL REGISTRADO EN EL SISTEMA");
    			return iso;
			}
    		
			if(!Arrays.asList(iso.getISO_114_ExtendedData().split("\\|")).get(0).equals(documentId)){
				
				iso.setISO_039_ResponseCode("115");
    			iso.setISO_039p_ResponseDetail("NRO. DE IDENTIFICACION DEL CUENTAHABIENTE NO COINCIDE "
    					+ "CON EL REGISTRADO EN EL SISTEMA");
    			return iso;
			}
			if(validateMovil){
				if(celu.startsWith("+593")){
					
					if(celu.contains("-")){
						
						if(!Arrays.asList(iso.getISO_114_ExtendedData().split("\\|")).get(3).
								equals(Arrays.asList(celu.split("\\-")).get(1).trim())){
							iso.setISO_039_ResponseCode("115");
			    			iso.setISO_039p_ResponseDetail("NRO. CELULAR DEL CUENTAHABIENTE NO COINCIDE "
			    					+ "CON EL REGISTRADO EN EL SISTEMA");
			    			return iso;
						}
					}
				}else{
					iso.setISO_039_ResponseCode("115");
	    			iso.setISO_039p_ResponseDetail("FORMATO NUMERO CELULAR DEL CUENTAHABIENTE "
	    					+ "NO ES EL ADECUADO EL CORRECTO ES (+593-09XXXXXXXX)");
	    			return iso;
				}
			}
			iso.setISO_039_ResponseCode("000");

    		
		} catch (Exception e) {
		
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail("ERROR AL VALIDAR DATOS DEL CUENTAHABIENTE");
			log.WriteLogMonitor("Error modulo FitIsAut::validatePersonBCE_VCE ", TypeMonitor.error, e);


		}
    	
    	return iso;

    }
    
    public wIso8583 addIsoAdditionalRows(Ref<wIso8583> isoReference){
    	
    	try {
			
    		wIso8583 iso = isoReference.get();
    		AdditionalIsoValues addIsoObject = new AdditionalIsoValues();
    		List<AdditionalIsoValues> list = addIsoObject.getAdditionalIsoValuesListObject(iso.getISO_003_ProcessingCode()
    								  , Integer.parseInt(iso.getISO_024_NetworkId()), iso.getISO_018_MerchantType()
    								  , -1);
    		for (AdditionalIsoValues additionalIsoValues : list) {
    			
    			Class<?> isoClass = iso.getClass();
    			java.lang.reflect.Field isoField = isoClass.getSuperclass().getDeclaredField(additionalIsoValues.getIso_row());
    			isoField.setAccessible(true);
    			isoField.set(iso, additionalIsoValues.getIso_value());
			}
    		
    		isoReference.set(iso);
    		
		} catch (Exception e) {
			
			log.WriteLogMonitor("Error modulo FitIsAut::addIsoAdditionalRows ", TypeMonitor.error, e);
		}
    	return isoReference.get();
    }
    
}
