package com.fitbank.middleware.sqlservices;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.concurrent.Callable;
import com.fitbank.middleware.cscoreswitch.Iso8583;
import com.fitbank.middleware.cscoreswitch.csProcess;
import com.fitbank.middleware.cscoreswitch.wIso8583;
import com.fitbank.middleware.logger.Logger;
import com.fitbank.middleware.logger.LoggerConfig.TypeMonitor;
import com.fitbank.middleware.memcached.Config;
import com.fitbank.middleware.memcached.MemoryGlobal;
import com.fitbank.middleware.utils.FormatUtils;
import com.fitbank.middleware.utils.GeneralUtils;
import com.fitbank.middleware.utils.Ref;
import com.fitbank.middleware.utils.StringUtils;

import oracle.jdbc.OracleTypes;

public class IsoRetrievalTransaction implements Callable<wIso8583>{
	
	private Logger log;
	private wIso8583 iso;
	
	public IsoRetrievalTransaction(){
		this.log = new Logger();
	}
	
	public IsoRetrievalTransaction(wIso8583 iso){
		this();
		this.iso = iso;
	}

	public wIso8583 RetrieveTransactionIso(wIso8583 isoRequest, int option) {
		
		wIso8583 iso = null;
		CallableStatement cs = null ;
		
		try {			
			
			
			Connection cn = MemoryGlobal.conn;
			
			switch (option) {
			
			case 0:
				
				//Calculo del mismo valor fecha + secuencial en ISO044
				if (isoRequest.getISO_011_SysAuditNumber().length() > 11) {
					
					isoRequest.setISO_044_AddRespData(FormatUtils.DateToString(isoRequest.getISO_012_LocalDatetime(), 
							   "yyMMddHHmmss") + "_" + isoRequest.getISO_011_SysAuditNumber());
				}else {
					
					isoRequest.setISO_044_AddRespData(FormatUtils.DateToString(isoRequest.getISO_012_LocalDatetime(), 
							   "yyyyMMddHHmmss") + "_" + isoRequest.getISO_011_SysAuditNumber());
				}
				return isoRequest;
				
			case 1:
				cs = cn.prepareCall("{ CALL SW_RetrieveTransaction(?,?,?,?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_011_SysAuditNro", isoRequest.getISO_011_SysAuditNumber());
				cs.setLong("i_wISO_012_LocDt_dec", Long.parseLong(FormatUtils.
						   DateToString(isoRequest.getISO_012_LocalDatetime(), "yyyyMMddHHmmss")));
				cs.setString("i_wISO_003_ProcCode", isoRequest.getISO_003_ProcessingCode());
				cs.setString("i_wISO_102_Acc_1", isoRequest.getISO_102_AccountID_1());
				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				
				break;
				
			case 2:
				
				cs = cn.prepareCall("{ CALL SW_RetrieveTrxElectronicCash(?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_011_SysAuditNumber", isoRequest.getISO_011_SysAuditNumber());
				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				
				break;
				
			case 3:
				
				cs = cn.prepareCall("{ CALL SW_RetrieveTrxAlexSoft(?,?,?,?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_037_RetRefNro", isoRequest.getISO_037_RetrievalReferenceNumber());
				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				cs.setDouble("i_wISO_004_AmountTransaction", isoRequest.getISO_004_AmountTransaction());
				cs.setString("i_wISO_102_AccountID_1", isoRequest.getISO_102_AccountID_1());
				cs.setString("i_wISO_103_AccountID_2", isoRequest.getISO_103_AccountID_2());
				
				break;
				
			case 4:
				
				cs = cn.prepareCall("{ CALL SW_RetrieveTrxBCE_VC(?,?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_044_AddResData", isoRequest.getISO_044_AddRespData());

				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				cs.setDouble("i_wISO_004_AmountTransaction", isoRequest.getISO_004_AmountTransaction());
				
				
				break;
			
			case 5:
				
				//Descomposicion del campo /090 Original Data Elements
				if(isoRequest.getISO_090_OriginalData().length() == 42){
					
					try {
						
						String mtiOriginal = isoRequest.getISO_090_OriginalData().substring(0,4);
						String mtiIso1 = StringUtils.Empty();
						
						switch (mtiOriginal) {
						case "0220":
						case "0200":
							mtiIso1 = "1200";
							break;	
						default:
							break;
						}
						
						String secuencial = String.valueOf(Integer.parseInt(isoRequest.
								getISO_090_OriginalData().substring(4,16)));
						String date13 = isoRequest.getISO_090_OriginalData().substring(16,20);
						String time12 = isoRequest.getISO_090_OriginalData().substring(20,28)
								        .substring(0,6);
						
						String fecha =  (FormatUtils.DateToString(new Date(), "yyyy")  + 
				                   		date13 + time12);
						
						cs = cn.prepareCall("{ CALL SW_RetrieveTrxCardExternals(?,?,?,?,?,?,?,?,?)}");
						cs.setString("i_wISO_000_Mess_Type", mtiIso1);
						cs.setDouble("i_wISo_004_Ammount", isoRequest.getISO_004_AmountTransaction());
						cs.setString("i_wISO_011_SysAudit", secuencial);
						cs.setString("i_wISO_012_LocDt_dec", fecha);
						cs.setString("i_wISO_003_ProcCode", isoRequest.getISO_003_ProcessingCode());
						cs.setString("i_wISO_102_Acc_1", isoRequest.getISO_102_AccountID_1());
						cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
						cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
						
					} catch (Exception e) {
						
						iso = new wIso8583();
						iso.setISO_039_ResponseCode("904");
						iso.setISO_039p_ResponseDetail("CAMPO ISO_090 INVALIDO");
						return iso;
					}	
					
				}else{
					
					iso = new wIso8583();
					iso.setISO_039_ResponseCode("905");
					iso.setISO_039p_ResponseDetail("CAMPO ISO_090 TIENE LONGITUD ERRONEA");
					return iso;
				}
				break;
				
			case 6:
				
				cs = cn.prepareCall("{ CALL SW_RETRIEVETRXCREDENCIAL(?,?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_011_SysAuditNumber", isoRequest.getISO_011_SysAuditNumber());
				cs.setString("i_wISO_038_AutorizationNumber", isoRequest.getISO_038_AutorizationNumber());
				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				
				break;
				
			case 7:
				
				String fecha = FormatUtils.DateToString(isoRequest.getISO_012_LocalDatetime(), "yyyyMMddHHmmss"); 
				cs = cn.prepareCall("{ CALL SW_RETRIEVETRANSACTIONATMS(?,?,?,?,?,?,?,?)}");
				cs.setString("i_wISO_000_Mess_Type", isoRequest.getISO_000_Message_Type().replace("14", "12"));
				cs.setString("i_wISO_011_SysAuditNumber", isoRequest.getISO_011_SysAuditNumber());
				cs.setString("i_wISO_012_LocDt_dec", fecha);
				cs.setString("i_wISO_003_ProcCode", isoRequest.getISO_003_ProcessingCode());
				cs.setString("i_wISO_102_Acc_1", isoRequest.getISO_102_AccountID_1());
				cs.setString("i_wISO_024_NetId", isoRequest.getISO_024_NetworkId());
				cs.setString("i_wISO_018_MerchType", isoRequest.getISO_018_MerchantType());
				
				break;

			default:
				break;
			}
				
			cs.registerOutParameter("p_iso_resulset", OracleTypes.CURSOR);
			cs.execute();
			ResultSet rs = (ResultSet)cs.getObject("p_iso_resulset");
			int count = 0;
			
			if(rs != null){
			
				iso = new wIso8583();
				
				while (rs.next()) {
					count++;
					if(count > 1)
						break;
					iso.setISO_000_Message_Type(rs.getString("wISO_000_Message_Type"));
					iso.setISO_BitMap(rs.getString("wISO_BITMAP"));
					iso.setISO_002_PAN(rs.getString("wISO_002_PAN"));
					iso.setISO_003_ProcessingCode(rs.getString("wISO_003_ProcessingCode"));
					iso.setISO_004_AmountTransaction(rs.getDouble("wISO_004_AmountTransaction"));
					iso.setISO_006_BillAmount(rs.getDouble("wISO_006_BillAmount"));
					iso.setISO_007_TransDatetime(rs.getDate("wISO_007_TransDatetime"));
					iso.setISO_008_BillFeeAmount(rs.getDouble("wISO_008_BillFeeAmount"));
					iso.setISO_011_SysAuditNumber(rs.getString("wISO_011_SysAuditNumber"));
					iso.setISO_012_LocalDatetime(rs.getDate("wISO_012_LocalDatetime"));
					iso.setISO_013_LocalDate(rs.getDate("wISO_013_LocalDate"));
					iso.setISO_015_SettlementDatel(rs.getDate("wISO_015_SettlementDatel"));
					iso.setISO_018_MerchantType(rs.getString("wISO_018_MerchantType"));
					iso.setISO_019_AcqCountryCode(rs.getString("wISO_019_AcqCountryCode"));
					iso.setISO_022_PosEntryMode(rs.getString("wISO_022_PosEntryMode"));
					iso.setISO_023_CardSeq(rs.getString("wISO_023_CardSeq"));
					iso.setISO_024_NetworkId(rs.getString("wISO_024_NetworkId"));
					iso.setISO_028_TranFeeAmount(rs.getDouble("wISO_028_TranFeeAmount"));
					iso.setISO_029_SettlementFee(rs.getDouble("wISO_029_SettlementFee"));
					iso.setISO_030_ProcFee(rs.getDouble("wISO_030_ProcFee"));
					iso.setISO_032_ACQInsID(rs.getString("wISO_032_ACQInsID"));
					iso.setISO_033_FWDInsID(rs.getString("wISO_033_FWDInsID"));
					iso.setISO_034_PANExt(rs.getString("wISO_034_PANExt"));
					iso.setISO_035_Track2(rs.getString("wISO_035_Track2"));
					iso.setISO_036_Track3(rs.getString("wISO_036_Track3"));
					iso.setISO_037_RetrievalReferenceNumber(rs.getString("wISO_037_RetrievalReferenceNro"));
					iso.setISO_038_AutorizationNumber(rs.getString("wISO_038_AutorizationNumber"));
					iso.setISO_039_ResponseCode(rs.getString("wISO_039_ResponseCode"));
					iso.setISO_039p_ResponseDetail(rs.getString("wISO_039p_ResponseDetail"));
					iso.setISO_041_CardAcceptorID(rs.getString("wISO_041_CardAcceptorID"));
					iso.setISO_042_Card_Acc_ID_Code(rs.getString("wISO_042_Card_Acc_ID_Code"));
					iso.setISO_043_CardAcceptorLoc(rs.getString("wISO_043_CardAcceptorLoc"));
					iso.setISO_044_AddRespData(rs.getString("wISO_044_AddRespData"));
					iso.setISO_049_TranCurrCode(rs.getDouble("wISO_049_TranCurrCode"));
					iso.setISO_051_CardCurrCode(rs.getDouble("wISO_051_CardCurrCode"));
					iso.setISO_052_PinBlock(rs.getString("wISO_052_PinBlock"));
					iso.setISO_054_AditionalAmounts(rs.getString("wISO_054_AditionalAmounts"));
					iso.setISO_055_EMV(rs.getString("wISO_055_EMV"));
					iso.setISO_090_OriginalData(rs.getString("wISO_090_OriginalData"));
					iso.setISO_102_AccountID_1(rs.getString("wISO_102_AccountID_1"));
					iso.setISO_103_AccountID_2(rs.getString("wISO_103_AccountID_2"));
					iso.setISO_104_TranDescription(rs.getString("wISO_104_TranDescription"));
					iso.setISO_120_ExtendedData(rs.getString("wISO_120_ExtendedData"));
					iso.setISO_121_ExtendedData(rs.getString("wISO_121_ExtendedData"));
					iso.setISO_123_ExtendedData(rs.getString("wISO_123_ExtendedData"));
					iso.setISO_124_ExtendedData(rs.getString("wISO_124_ExtendedData"));
					iso.setWsIso_LogStatus(rs.getInt("wsISO_LogStatus"));
					iso.setWsISO_TranDatetime(rs.getDate("wsISO_TranDatetime"));
					iso.setWsISO_TranDatetimeResponse(rs.getDate("wsISO_TranDatetimeResponse"));
					iso.setWsISO_SFRetryCounts(rs.getInt("wsISO_SFRetryCounts"));
					iso.setWsISO_FlagStoreForward(Boolean.parseBoolean(rs.getString("wsISO_FlagStoreFprward")));
					iso.setwISO_012_LocalDatetime_decimal(rs.getDouble("wISO_012_LocalDatetime_decimal"));
					
					iso.setISO_039_ResponseCode("000");
					
					/*SOLO PARA FIT1 RECUPERAR EL MSGID*/
					Config cfg = new Config();
					cfg = cfg.getConfigSystem("FIT_VERSION");
					if(cfg != null){
						if(cfg.getCfg_Valor().equals("1")){
							if(!iso.getISO_044_AddRespData().contains("^"))
								iso = getInfoReversoFit1(iso);
						}
					}
					
				}
				if(count > 1){
					
					iso = new wIso8583();
					iso.setISO_039_ResponseCode("602");
					iso.setISO_039p_ResponseDetail("TRANSACCION ORIGINAL INCONSISTENTE ROWS: " + count);
				}else if (count == 0) {
					
					iso = new wIso8583();
					iso.setISO_039_ResponseCode("601");
					iso.setISO_039p_ResponseDetail("TRANSACCION A REVERSAR NO EXISTE");
				}	
				
			}else{
				
				iso = new wIso8583();
				iso.setISO_039_ResponseCode("601");
				iso.setISO_039p_ResponseDetail("TRANSACCION A REVERSAR NO EXISTE");
			}
		    
		} catch (SQLException ex) {
				
			iso = new wIso8583();
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", ex, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::RetrieveTransactionIso (SQLException) ", TypeMonitor.error, ex);
			
		} catch (Exception e) {			
			
			iso = new wIso8583();
			iso.setISO_039_ResponseCode("908");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", e, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::RetrieveTransactionIso ", TypeMonitor.error, e);
			
		}finally {
			
			try {
				if(cs!=null)
					cs.close();
			} catch (SQLException e) {e.printStackTrace();}
		}
		
		
		return iso;
	}
	
     public wIso8583 MantenainceCommerceSQL(wIso8583 isoRequest) {
		
		CallableStatement cs = null ;
		StringBuilder str = new StringBuilder();
		str.append(isoRequest.getISO_BitMap() + "R|" + isoRequest.getISO_011_SysAuditNumber() + "|");
		try {			
			
			Connection cn = MemoryGlobal.conn;		
			cs = cn.prepareCall("{ CALL SW_SP_MANTENAINCE_COMMERCE(?,?,?,?,?,?,?,?,?,?,?)}");
			cs.setString("iPrefix", isoRequest.getISO_BitMap());
			cs.setString("iCodComercio", isoRequest.getISO_002_PAN());
			cs.setString("iNomComercio", isoRequest.getISO_034_PANExt());
			cs.setString("iDireccionComercio", isoRequest.getISO_120_ExtendedData());
			cs.setString("iNumDocumentoComercio", isoRequest.getISO_121_ExtendedData());
			cs.setString("iNomSocioComercio", isoRequest.getISO_122_ExtendedData());
			cs.setString("iNumCuentaComercio", isoRequest.getISO_102_AccountID_1());
			cs.setString("iObsComercio", isoRequest.getISO_114_ExtendedData());
			cs.setString("iEstadoComercio", isoRequest.getISO_123_ExtendedData());
			cs.setString("iCpersona", isoRequest.getISO_023_CardSeq());
			cs.registerOutParameter("p_recordsetInit", OracleTypes.CURSOR);
			cs.execute();
			ResultSet rs = (ResultSet)cs.getObject("p_recordsetInit");
			int count = 0;
			
			if(rs != null){
				
				while (rs.next()) {
					count++;
					if(count > 1)
						str.append("^");
					
					isoRequest.setISO_039_ResponseCode(rs.getString("COD"));
					isoRequest.setISO_039p_ResponseDetail(rs.getString("DETALLE"));
					if(count == 1)
						str.append(isoRequest.getISO_039_ResponseCode() + "|" + isoRequest.getISO_039p_ResponseDetail() + "|");
					isoRequest.setWsIso_LogStatus(2);
					isoRequest.setWsISO_TranDatetimeResponse(new Date());
					if(rs.getString("COD").equals("000") 
							&& isoRequest.getISO_BitMap().startsWith("PAG_C")){
						
						isoRequest.setISO_002_PAN(rs.getString("COD_COMERCIO"));
						isoRequest.setISO_034_PANExt(rs.getString("NOM_COMERCIO"));
						isoRequest.setISO_120_ExtendedData(rs.getString("DIRECCION_COMERCIO"));
						isoRequest.setISO_121_ExtendedData(rs.getString("NUMDOC_ASOC_COMERCIO"));
						isoRequest.setISO_122_ExtendedData(rs.getString("NOMSOCIO_ASOC_COMERCIO"));
						isoRequest.setISO_102_AccountID_1(rs.getString("NUMCTA_ASOC_COMERCIO"));
						isoRequest.setISO_114_ExtendedData(rs.getString("OBS_COMERCIO"));
						isoRequest.setISO_123_ExtendedData(rs.getString("ESTADO_COMERCIO"));
						isoRequest.setISO_023_CardSeq(rs.getString("CPERSONA"));
						
						str.append(isoRequest.getISO_002_PAN() + "|" + isoRequest.getISO_034_PANExt() + "|" +
								   isoRequest.getISO_120_ExtendedData() + "|" + isoRequest.getISO_121_ExtendedData() +  "|" +
								   isoRequest.getISO_122_ExtendedData() + "|" + isoRequest.getISO_102_AccountID_1() + "|" +
								   isoRequest.getISO_114_ExtendedData() + "|" + isoRequest.getISO_123_ExtendedData() + "|" +
								   isoRequest.getISO_023_CardSeq());
					}
				}
				if (count == 0) {
					
					isoRequest = new wIso8583();
					isoRequest.setISO_039_ResponseCode("908");
					isoRequest.setISO_039p_ResponseDetail("ERROR, EL PROCESO NO HA ARROJADO NINGUN RESULTADO");
				}	
				
			}else{
				
				isoRequest = new wIso8583();
				isoRequest.setISO_039_ResponseCode("909");
				isoRequest.setISO_039p_ResponseDetail("ERROR EN PROCESOS NO SE HA PODIDO INTERACTUAR CON LA BDD");
			}
		    
		} catch (SQLException ex) {
			
			isoRequest.setISO_039_ResponseCode("909");
			isoRequest.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE COMMERCE ERROR ", ex, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::MantenainceCommerceSQL (SQLException) ", TypeMonitor.error, ex);
			
		} catch (Exception e) {			
			
			isoRequest.setISO_039_ResponseCode("908");
			isoRequest.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE COMMERCE ERROR ", e, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::MantenainceCommerceSQL ", TypeMonitor.error, e);
			
		}finally {
			
			isoRequest.setISO_115_ExtendedData(str.toString());
			
			try {
				if(cs!=null)
					cs.close();
			} catch (SQLException e) {e.printStackTrace();}
		}
		
		return isoRequest;
	}
	
     public wIso8583 RetrieveCommerceSQL(wIso8583 isoRequest) {
 		
 		CallableStatement cs = null ;
 		
 		try {			
 			
 			Connection cn = MemoryGlobal.conn;		
 			cs = cn.prepareCall("{ CALL SW_RETRIEVE_COMMERCE(?,?)}");
 			cs.setString("i_CommerceCod", isoRequest.getISO_120_ExtendedData());
 			cs.registerOutParameter("p_iso_resulset", OracleTypes.CURSOR);
 			cs.execute();
 			ResultSet rs = (ResultSet)cs.getObject("p_iso_resulset");
 			int count = 0;
 			
 			if(rs != null){
 				
 				while (rs.next()) {
 					count++;
 					if(count > 1)
 						break;
 					
 					isoRequest.setISO_039_ResponseCode(rs.getString("COD"));
 					isoRequest.setISO_039p_ResponseDetail(rs.getString("DETALLE"));
 					
 					isoRequest.setWsIso_LogStatus(2);
 					isoRequest.setWsISO_TranDatetimeResponse(new Date());
 					if(rs.getString("COD").equals("000")){
 						
 						isoRequest.setISO_103_AccountID_2(rs.getString("NUMCTA_ASOC_COMERCIO"));
 						isoRequest.setISO_023_CardSeq(rs.getString("CPERSONA"));
 					}
 				}
 				if (count == 0) {
 					
 					isoRequest = new wIso8583();
 					isoRequest.setISO_039_ResponseCode("908");
 					isoRequest.setISO_039p_ResponseDetail("ERROR, EL PROCESO NO HA ARROJADO NINGUN RESULTADO");
 				}	
 				
 			}else{
 				
 				isoRequest = new wIso8583();
 				isoRequest.setISO_039_ResponseCode("909");
 				isoRequest.setISO_039p_ResponseDetail("ERROR EN PROCESOS NO SE HA PODIDO INTERACTUAR CON LA BDD");
 			}
 		    
 		} catch (SQLException ex) {
 			
 			isoRequest.setISO_039_ResponseCode("909");
 			isoRequest.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE COMMERCE ERROR ", ex, false));
 			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::MantenainceCommerceSQL (SQLException) ", TypeMonitor.error, ex);
 			
 		} catch (Exception e) {			
 			
 			isoRequest.setISO_039_ResponseCode("908");
 			isoRequest.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE COMMERCE ERROR ", e, false));
 			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::RetrieveCommerceSQL ", TypeMonitor.error, e);
 			
 		}finally {
 			
 			
 			try {
 				if(cs!=null)
 					cs.close();
 			} catch (SQLException e) {e.printStackTrace();}
 		}
 		
 		return isoRequest;
 	} 
     
	public wIso8583 getControlBDDStatus(wIso8583 iso){
		
		CallableStatement cs = null ;
		try {
			
			Connection cn = MemoryGlobal.conn;
			cs = cn.prepareCall("{ CALL SW_CONTROL_BDD(?)}");
			cs.registerOutParameter("p_recordsetInit", OracleTypes.CURSOR);
			cs.execute();
			ResultSet rs = (ResultSet)cs.getObject("p_recordsetInit");
			
			if(rs != null){
				while (rs.next()) {
					iso.setISO_120_ExtendedData(rs.getString(3));
				}
			}
			if(StringUtils.IsNullOrEmpty(iso.getISO_120_ExtendedData())){
				
				iso.setISO_039_ResponseCode("906");
				iso.setISO_039p_ResponseDetail("RETORNO RS=0");
			}
			else{
				iso.setISO_039_ResponseCode("000");
				iso.setISO_039p_ResponseDetail("TRANSACCION EXITOSA");
			}
			
		} catch (SQLException ex) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", ex, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::getControlBDDStatus (SQLException) ", TypeMonitor.error, ex);
			
		} catch (Exception e) {			
			
			iso.setISO_039_ResponseCode("908");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", e, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::getControlBDDStatus ", TypeMonitor.error, e);
			
		}finally {
			
			 try {
				 if(cs!=null)
				  cs.close();
			} catch (SQLException e) { e.printStackTrace(); }
		}
		
		return iso;
	}
	
	private wIso8583 getInfoReversoFit1(wIso8583 iso){
		
		try {
			
			Iso8583 ISO = new Iso8583();
			ISO.setISO_000_Message_Type("1200");
			ISO.setISO_003_ProcessingCode("333333");
			ISO.setISO_007_TransDatetime(new Date());
			ISO.setISO_011_SysAuditNumber(GeneralUtils.GetSecuencial(8));
			ISO.setISO_012_LocalDatetime(new Date());
			ISO.setISO_015_SettlementDatel(new Date());
			ISO.setISO_018_MerchantType(iso.getISO_018_MerchantType());
			ISO.setISO_024_NetworkId(iso.getISO_024_NetworkId());
		    ISO.setISO_044_AddRespData(iso.getISO_044_AddRespData());
			ISO.setISO_115_ExtendedData("NUMEROMENSAJE");
			ISO.setISO_102_AccountID_1(iso.getISO_102_AccountID_1());
			
			csProcess proccesor = new csProcess();
			ISO = proccesor.ProcessTransactionMain(ISO, "127.0.0.1");
			if(ISO.getISO_039_ResponseCode().equals("000")){
				
				iso.setISO_044_AddRespData(ISO.getISO_114_ExtendedData());
				iso.setISO_039_ResponseCode("000");
				
			}else{
				
				iso.setISO_039_ResponseCode(ISO.getISO_039_ResponseCode());
				iso.setISO_039p_ResponseDetail(ISO.getISO_039p_ResponseDetail());
			}
			
		} catch (Exception e) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail("ERROR EN PROCESOS, NO SE PUDO RECUPERAR MSGID FIT1 " 
						+ GeneralUtils.ExceptionToString(null, e, true));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::getInfoReversoFit1", TypeMonitor.error, e);
		}
		
		return iso;
	}
	public wIso8583 getValCupoTrx(wIso8583 iso){
		
		
		CallableStatement cs = null ;
		try {
			
			Connection cn = MemoryGlobal.conn;
			cs = cn.prepareCall("{ CALL SW_C_TRANSACTIONCUPO(?,?,?,?,?,?,?,?,?)}");
			cs.setString("iLimProcCode", iso.getISO_003_ProcessingCode());
			cs.setString("iLimRed", iso.getISO_024_NetworkId());
			if(StringUtils.IsNullOrEmpty(iso.getISO_102_AccountID_1()))
				cs.setString("iLimDocumento", iso.getISO_002_PAN());
			else
				cs.setString("iLimDocumento", iso.getISO_102_AccountID_1());
			cs.setString("iLimCanal", iso.getISO_018_MerchantType());
			cs.setInt("iLimNumero", 1);
			cs.setDouble("iLimMonto", iso.getISO_004_AmountTransaction());
			cs.setString("iLimSecuencial", iso.getISO_011_SysAuditNumber());
			cs.setDouble("iLimAmmountDebit", iso.getWsTransactionConfig().getAmmountDebit());
			
			cs.registerOutParameter("p_recordsetInit", OracleTypes.CURSOR);
			cs.execute();
			ResultSet rs = (ResultSet)cs.getObject("p_recordsetInit");
			
			iso.setISO_039_ResponseCode(null);
			
			if(rs != null){
				while (rs.next()) {
					iso.setISO_039_ResponseCode(rs.getString(1));
					iso.setISO_039p_ResponseDetail(rs.getString(2));
				}
			}
			if(StringUtils.IsNullOrEmpty(iso.getISO_039_ResponseCode())){
				
				iso.setISO_039_ResponseCode("906");
				iso.setISO_039p_ResponseDetail("RETORNO RS=0");
			}
			
		} catch (SQLException ex) {
			
			iso.setISO_039_ResponseCode("909");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", ex, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::getValCupoTrx (SQLException) ", TypeMonitor.error, ex);
			
		} catch (Exception e) {			
			
			iso.setISO_039_ResponseCode("908");
			iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("RETRIEVE ISO ERROR ", e, false));
			log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::getValCupoTrx ", TypeMonitor.error, e);
		}finally {
			
			try {
				if(cs!=null)
					cs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return iso;
	}
	
	public wIso8583 executeQueryValidAccount(Ref<wIso8583> isoref){

		    int count = 0;
			wIso8583 iso = isoref.get();
		
		    Statement stmt = null;
		    String query =  "select CCUENTA, NOMBRECUENTA, CCONDICIONOPERATIVA, " +
		    		        "CESTATUSCUENTA, CGRUPOPRODUCTO, CPRODUCTO " +
				    		"from tcuenta nolock " +
				    		"where CSUBSISTEMA = '04' " +
				    		"and FHASTA > SYSDATE " +
				    		"and CESTATUSCUENTA = '002' " +
				    		"and CPRODUCTO not in ('407','410') " +
				    		"and CCUENTA = '"+  iso.getISO_102_AccountID_1() + "' " +
				    		"and CPERSONA_COMPANIA = 2 "; 
		    try {
		    	
		        stmt = MemoryGlobal.conn.createStatement();
		        ResultSet rs = stmt.executeQuery(query);
		        
		        while (rs.next()) {
		        	
		        	++count;
		            iso.setISO_120_ExtendedData(rs.getString("NOMBRECUENTA"));
		            iso.setISO_121_ExtendedData(rs.getString("CESTATUSCUENTA"));
		            iso.setISO_122_ExtendedData(rs.getString("CGRUPOPRODUCTO") + " - " + rs.getString("CPRODUCTO"));
		            iso.setISO_123_ExtendedData(rs.getString("CCONDICIONOPERATIVA"));
		            
		        }
		        
		        if(count <= 0){
		        	
		        	iso.setISO_039_ResponseCode("214");
		        	iso.setISO_039p_ResponseDetail("LA CUENTA NO EXISTE, O NO PERMITIDA PARA "
		        			+ "ESTE TIPO DE TRANSACCION");
		        	
		        }else{
		        	
		        	iso.setISO_039_ResponseCode("000");
		        	iso.setISO_039p_ResponseDetail("TRANSACCION EXITOSA");
		        }
		        
		        iso.setWsIso_LogStatus(2);
		        iso.setWsISO_TranDatetimeResponse(new Date());
		        
		    } catch (SQLException e ) {
		       
		    	iso.setISO_039_ResponseCode("909");
		    	iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR BDD ", e, false));
		    	log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::executeQueryValidAccount", TypeMonitor.error, e);
		    	
		    } finally {
		    	
		        if (stmt != null) { 
		        	
			        try {
						stmt.close();
					} catch (SQLException e) {
						
						iso.setISO_039_ResponseCode("909");
				    	iso.setISO_039p_ResponseDetail(GeneralUtils.ExceptionToString("ERROR CLOSE STATEMENT BDD ", e, false));
				    	log.WriteLogMonitor("Error modulo IsoRetrievalTransaction::executeQueryValidAccount", TypeMonitor.error, e);
					} 
		        }
		    }
		    
		    return isoref.get();
	}

	@Override
	public wIso8583 call() throws Exception {
		
		return getControlBDDStatus(this.iso);
	}
	
	
}
